{"version":3,"sources":["Layout/Header.js","utils/api/index.js","Components/DeckPreview/DeckPreview.js","Containers/DecksList/DecksList.js","Forms/CreateDeckForm.js","Containers/CreateDeck/CreateDeck.js","Containers/EditDeck/EditDeck.js","Components/StudyCard/StudyCard.js","Containers/Study/Study.js","Forms/CardForm.js","Containers/EditCard/EditCard.js","Containers/NewCard/NewCard.js","Components/Card/Card.js","Containers/CardList/CardList.js","Containers/DeckView/DeckView.js","Layout/NotFound.js","Routes/DecksRoutes.js","Layout/index.js","App.js","index.js"],"names":["Header","className","API_BASE_URL","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","deleteCard","append","DeckPreview","description","onDelete","deckLength","cardNumber","to","onClick","DecksList","useState","decks","setDecks","isLoading","setLoading","history","useHistory","useEffect","getDecks","deckDeleteHandler","window","confirm","curr","filter","push","length","map","sort","b","CreateDeckForm","submitHandler","changeHandler","useParams","onSubmit","event","htmlFor","type","placeholder","value","onChange","rows","CreateDeck","newDeck","setNewDeck","preventDefault","trim","alert","target","EditDeck","currentDeck","setCurrentDeck","getDeck","updateDeck","StudyCard","flipCard","frontSide","nextCard","cardIndex","front","back","Study","frontShowing","isFrontShowing","currentCard","setCurrentCard","deckData","CardForm","EditCard","deckDefault","cardDefault","setCard","setDeck","cardResponse","deckResponse","getData","NewCard","defaultCard","deckName","setDeckName","getDeckName","Card","deleteHandler","linkPath","CardList","content","deleteCardHandler","go","DeckView","NotFound","Decks","exact","path","Layout","DecksRoutes","App","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.2df91918.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = 'https://jdavisson87.github.io/Data/db.json';\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append('Content-Type', 'application/json');\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n  } catch (error) {\n    if (error.name !== 'AbortError') {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: 'PUT',\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: 'DELETE', signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: 'PUT',\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: 'DELETE', signal };\n  return await fetchJson(url, options);\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst DeckPreview = ({\n  name,\n  description,\n  deckId,\n  onDelete,\n  deckLength = 0,\n}) => {\n  const cardNumber = `${deckLength} ${deckLength === 1 ? 'card' : 'cards'}`;\n  return (\n    <li className=\"card list-group-item\" key={deckId}>\n      <div className=\"card-body\">\n        <div className=\"d-flex flex-row justify-content-between\">\n          <h4 className=\"card-title\">{name}</h4>\n          <h6 className=\"card-subtitle text-muted\">{cardNumber}</h6>\n        </div>\n        <p className=\"card-text\">{description}</p>\n        <div className=\"float-left\">\n          <Link to={`/decks/${deckId}`} className=\"btn-lg btn-secondary m-1\">\n            <i className=\"bi bi-eye\" />\n            {` `}View\n          </Link>\n          <Link\n            to={`/decks/${deckId}/study`}\n            className=\"btn-lg btn-primary m-1\"\n          >\n            <i className=\"bi bi-book-half\"></i>\n            {` `}Study\n          </Link>\n        </div>\n        <button\n          onClick={() => onDelete(deckId)}\n          className=\"btn-lg btn-danger float-right\"\n        >\n          <i className=\"bi bi-trash\" />\n        </button>\n      </div>\n    </li>\n  );\n};\n\nexport default DeckPreview;\n","import React, { useState, useEffect } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { listDecks, deleteDeck } from '../../utils/api/index';\nimport DeckPreview from '../../Components/DeckPreview/DeckPreview';\n\nconst DecksList = () => {\n  const [decks, setDecks] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n  const history = useHistory();\n\n  useEffect(() => {\n    async function getDecks() {\n      try {\n        const response = await listDecks();\n        setDecks(response);\n        setLoading(false);\n      } catch (error) {\n        setLoading(false);\n        throw error;\n      }\n    }\n    getDecks();\n  }, []);\n\n  const deckDeleteHandler = async (id) => {\n    if (window.confirm('Delete this deck?')) {\n      await deleteDeck(id);\n      setDecks((curr) => curr.filter((deck) => deck.id !== id));\n      history.push('/');\n    }\n  };\n  return (\n    <div>\n      <Link to={`/decks/new`} className=\"btn btn-secondary\">\n        <i className=\"bi bi-plus-lg\"></i> {` `}Create Deck\n      </Link>\n      {isLoading ? (\n        <div>\n          <p>Loading....</p>\n        </div>\n      ) : (\n        <ul className=\"list-group mt-1 p-0\">\n          {decks.length > 0 ? (\n            decks\n              .map((deck) => (\n                <DeckPreview\n                  name={deck.name}\n                  description={deck.description}\n                  deckId={deck.id}\n                  onDelete={deckDeleteHandler}\n                  deckLength={deck.cards.length}\n                  key={`${deck.name}${deck.id}`}\n                />\n              ))\n              .sort((a, b) => a.id - b.id)\n          ) : (\n            <li className=\"card\">\n              There are currently no decks available. How about we create one?\n            </li>\n          )}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default DecksList;\n","import React from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nconst CreateDeckForm = ({ submitHandler, changeHandler, deck }) => {\n  const history = useHistory();\n  const { deckId } = useParams();\n  const cancelClick = () => {\n    if (deckId) {\n      history.push(`/decks/${deckId}`);\n    } else {\n      history.push('/');\n    }\n  };\n\n  return (\n    <form onSubmit={(event) => submitHandler(event, deck)}>\n      <div className=\"form-group\">\n        <label htmlFor=\"deck-form-name\">Name</label>\n        <input\n          id=\"name\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Deck Name\"\n          value={deck.name}\n          onChange={changeHandler}\n        />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"deck-form-description\">Description</label>\n        <textarea\n          id=\"description\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Brief description of the deck\"\n          value={deck.description}\n          rows=\"5\"\n          onChange={changeHandler}\n        />\n      </div>\n      <div>\n        <button onClick={cancelClick} className=\"btn btn-secondary mr-2\">\n          Cancel\n        </button>\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Submit\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default CreateDeckForm;\n","import React, { useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport CreateDeckForm from '../../Forms/CreateDeckForm';\nimport { createDeck } from '../../utils/api/index';\n\nconst CreateDeck = () => {\n  const history = useHistory();\n  const defaultCard = {\n    name: '',\n    description: '',\n  };\n\n  const [newDeck, setNewDeck] = useState({ ...defaultCard });\n\n  const changeHandler = ({ target }) => {\n    setNewDeck({\n      ...newDeck,\n      [target.id]: target.value,\n    });\n  };\n\n  async function submitHandler(event) {\n    event.preventDefault();\n    if (newDeck.name.trim() === '' || newDeck.description.trim() === '') {\n      alert('Please enter a valid name and description for your deck');\n      return null;\n    }\n    try {\n      const response = await createDeck(newDeck);\n      history.push(`/decks/${response.id}`);\n    } catch (error) {\n      alert(\n        'Sorry, something went wrong when we tried to create a new deck.  Please try again'\n      );\n      history.push('/');\n    }\n  }\n\n  return (\n    <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\" key=\"home-link\">\n            <Link to={'/'}>\n              <i className=\"bi bi-house-door-fill\" />\n              {` `}Home\n            </Link>\n          </li>\n          <li\n            className=\"breadcrumb-item active\"\n            aria-current=\"page\"\n            key=\"create-deck-link\"\n          >\n            Create Deck\n          </li>\n        </ol>\n      </nav>\n      <div>\n        <h1>Create Deck</h1>\n        <CreateDeckForm\n          submitHandler={submitHandler}\n          changeHandler={changeHandler}\n          deck={newDeck}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default CreateDeck;\n","import React, { useState, useEffect } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { updateDeck, readDeck } from '../../utils/api/index';\nimport CreateDeckForm from '../../Forms/CreateDeckForm';\n\nconst EditDeck = () => {\n  const history = useHistory();\n  const { deckId } = useParams();\n  const deckDefault = {\n    id: '',\n    name: '',\n    description: '',\n  };\n  const [currentDeck, setCurrentDeck] = useState({ ...deckDefault });\n\n  useEffect(() => {\n    async function getDeck() {\n      try {\n        const response = await readDeck(deckId);\n        await setCurrentDeck(response);\n      } catch (error) {\n        alert('Sorry, something went wrong');\n        history.push('/');\n      }\n    }\n    getDeck();\n  }, [deckId, history]);\n\n  const submitHandler = (event, updatedDeck) => {\n    event.preventDefault();\n    if (\n      currentDeck.name.trim() === '' ||\n      currentDeck.description.trim() === ''\n    ) {\n      alert('Please enter a valid name and description for your deck');\n      return null;\n    }\n    updateDeck(updatedDeck);\n    setCurrentDeck(updatedDeck);\n    history.push(`/decks/${deckId}`);\n  };\n\n  const changeHandler = (event) => {\n    setCurrentDeck({\n      ...currentDeck,\n      [event.target.id]: event.target.value,\n    });\n  };\n\n  return (\n    <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link to={`/decks/${deckId}`}>{currentDeck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Edit Deck\n          </li>\n        </ol>\n      </nav>\n      <div>\n        <h1>Edit Deck</h1>\n        <CreateDeckForm\n          deck={currentDeck}\n          changeHandler={changeHandler}\n          submitHandler={submitHandler}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default EditDeck;\n","import React from 'react';\n\nconst StudyCard = ({\n  card,\n  flipCard,\n  frontSide,\n  nextCard,\n  cardIndex,\n  deckLength,\n}) => {\n  return (\n    <div className=\"card p-3\">\n      <h5 className=\"card-title\">\n        Card {cardIndex} of {deckLength}\n      </h5>\n      <div className=\"card-text\">{frontSide ? card.front : card.back}</div>\n      <div>\n        <button className=\"btn btn-secondary m-1\" onClick={flipCard}>\n          Flip\n        </button>\n        {!frontSide && (\n          <button className=\"btn btn-primary m-1\" onClick={nextCard}>\n            Next\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default StudyCard;\n","import React, { useState, useEffect } from 'react';\nimport { Link, useParams, useHistory } from 'react-router-dom';\nimport { readDeck } from '../../utils/api/index';\nimport StudyCard from '../../Components/StudyCard/StudyCard';\n\nconst Study = () => {\n  const { deckId } = useParams();\n  const history = useHistory();\n  const defaultDeck = {\n    name: '',\n    cards: [],\n  };\n\n  const [frontShowing, isFrontShowing] = useState(true);\n  const [currentDeck, setCurrentDeck] = useState({ ...defaultDeck });\n  const [currentCard, setCurrentCard] = useState(0);\n\n  useEffect(() => {\n    async function getDeck() {\n      const deckData = await readDeck(deckId);\n      setCurrentDeck(deckData);\n    }\n    getDeck();\n  }, [deckId]);\n\n  const flipCard = () => {\n    isFrontShowing(!frontShowing);\n  };\n\n  const nextCard = () => {\n    const length = currentDeck.cards.length;\n    if (currentCard + 2 <= length) {\n      setCurrentCard(currentCard + 1);\n      isFrontShowing(true);\n    } else {\n      if (\n        window.confirm(\n          \"Restart Cards? Click 'cancel' to return to the homepage\"\n        )\n      ) {\n        setCurrentCard(0);\n        isFrontShowing(true);\n      } else {\n        history.push('/');\n      }\n    }\n  };\n\n  if (!currentDeck) {\n    return <p>Loading...</p>;\n  }\n  return (\n    <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\" key=\"home-link\">\n            <Link to={'/'}>\n              <i className=\"bi bi-house-door-fill\" />\n              {` `}Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item\" key=\"deck-link\">\n            <Link to={`/decks/${deckId}`}>{currentDeck.name}</Link>\n          </li>\n          <li\n            className=\"breadcrumb-item active\"\n            aria-current=\"page\"\n            key=\"study-link\"\n          >\n            Study\n          </li>\n        </ol>\n      </nav>\n      <h1>Study: {currentDeck.name}</h1>\n\n      {currentDeck.cards.length > 2 ? (\n        <div>\n          <StudyCard\n            card={currentDeck.cards[currentCard]}\n            cardIndex={currentCard + 1}\n            deckLength={currentDeck.cards.length}\n            frontSide={frontShowing}\n            flipCard={flipCard}\n            nextCard={nextCard}\n          />\n        </div>\n      ) : (\n        <div>\n          <h2>Not enough cards.</h2>\n          <p>\n            You need at least 3 cards to study. There{' '}\n            {currentDeck.cards.length === 1 ? 'is' : 'are'} currently{' '}\n            {currentDeck.cards.length} card\n            {currentDeck.cards.length === 0 || currentDeck.cards.length > 1\n              ? 's'\n              : ''}{' '}\n            in this deck\n          </p>\n          <Link\n            to={`/decks/${deckId}/cards/new`}\n            className=\"btn-lg btn-primary m-1\"\n          >\n            <i className=\"bi bi-plus-lg\" />\n            {` `}Add Card\n          </Link>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Study;\n","import React from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nconst CardForm = ({ card, submitHandler, changeHandler }) => {\n  const history = useHistory();\n  const { deckId } = useParams();\n\n  return (\n    <div>\n      <form onSubmit={submitHandler}>\n        <div className=\"form-group\">\n          <label htmlFor=\"front\">Front</label>\n          <textarea\n            type=\"text\"\n            className=\"form-control\"\n            id=\"front\"\n            placeholder=\"Add the front of the card\"\n            onChange={changeHandler}\n            value={card.front}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"back\">Back</label>\n          <textarea\n            type=\"text\"\n            className=\"form-control\"\n            id=\"back\"\n            placeholder=\"Add the back of the card\"\n            onChange={changeHandler}\n            value={card.back}\n          />\n        </div>\n        <button\n          onClick={() => history.push(`/decks/${deckId}`)}\n          className=\"btn-lg btn-secondary m-1\"\n        >\n          {card.id ? 'Cancel' : 'Done'}\n        </button>\n        <button type=\"submit\" className=\"btn-lg btn-primary m-1\">\n          {card.id ? 'Submit' : 'Save'}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default CardForm;\n","import React, { useState, useEffect } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport CardForm from '../../Forms/CardForm';\nimport { updateCard, readCard, readDeck } from '../../utils/api/index';\n\nconst EditCard = () => {\n  const history = useHistory();\n  const { deckId, cardId } = useParams();\n\n  const deckDefault = {\n    id: deckId,\n    name: '',\n    description: '',\n  };\n\n  const cardDefault = {\n    id: cardId,\n    deckId: deckId,\n    front: '',\n    back: '',\n  };\n\n  const [card, setCard] = useState(cardDefault);\n  const [deck, setDeck] = useState(deckDefault);\n\n  useEffect(() => {\n    async function getData() {\n      try {\n        const cardResponse = await readCard(cardId);\n        setCard(cardResponse);\n        const deckResponse = await readDeck(deckId);\n        setDeck(deckResponse);\n      } catch (error) {\n        throw error;\n      }\n    }\n    getData();\n  }, [cardId, deckId]);\n\n  const submitHandler = async (event) => {\n    event.preventDefault();\n    if (card.front.trim() === '' || card.back.trim() === '') {\n      alert('Please enter a valid front and back for your card.');\n      return;\n    }\n    updateCard(card);\n    history.push(`/decks/${deckId}`);\n  };\n\n  const changeHandler = ({ target }) => {\n    setCard({\n      ...card,\n      [target.id]: target.value,\n    });\n  };\n\n  return (\n    <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Edit Card\n          </li>\n        </ol>\n      </nav>\n      <div>\n        <h1>Edit Card</h1>\n        <CardForm\n          card={card}\n          submitHandler={submitHandler}\n          changeHandler={changeHandler}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default EditCard;\n","import React, { useState, useEffect } from 'react';\nimport { Link, useParams, useHistory } from 'react-router-dom';\nimport CardForm from '../../Forms/CardForm';\nimport { createCard, readDeck } from '../../utils/api/index';\n\nconst NewCard = () => {\n  const history = useHistory();\n  const { deckId } = useParams();\n  const defaultCard = {\n    id: null,\n    front: '',\n    back: '',\n    deckId: deckId,\n  };\n  const [card, setCard] = useState({ ...defaultCard });\n  const [deckName, setDeckName] = useState('');\n\n  useEffect(() => {\n    async function getDeckName() {\n      const deckData = await readDeck(deckId);\n      setDeckName(deckData.name);\n    }\n    getDeckName();\n  }, [deckId]);\n\n  const changeHandler = ({ target }) => {\n    setCard({\n      ...card,\n      [target.id]: target.value,\n    });\n  };\n\n  const submitHandler = async (event) => {\n    event.preventDefault();\n    if (card.front.trim() === '' || card.back.trim() === '') {\n      alert('Please enter a valid front and back for your card.');\n      return;\n    }\n    await createCard(deckId, card);\n    history.push(`/decks/${deckId}`);\n  };\n\n  return (\n    <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item\">\n            <Link to={`/decks/${deckId}`}>{deckName}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Add Card\n          </li>\n        </ol>\n      </nav>\n      <div>\n        <h1>{deckName}: Add Card</h1>\n        <CardForm\n          card={card}\n          changeHandler={changeHandler}\n          submitHandler={submitHandler}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default NewCard;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Card = ({ card, deleteHandler }) => {\n  const { front, back, deckId, id } = card;\n  const linkPath =\n    deckId && id\n      ? `/decks/${deckId}/cards/${id}/edit`\n      : deckId\n      ? `/decks/${deckId}`\n      : '/';\n\n  return (\n    <li className=\"list-group-item\" key={`${id}${deckId}`}>\n      <div className=\"card\">\n        <div className=\"d-flex flex-row p-2 card-body\">\n          <p className=\"mr-2 card-text col-6\"> {front}</p>\n          <p className=\"ml-2 col-6 card-text\">{back} </p>\n        </div>\n        <div>\n          <button\n            onClick={() => deleteHandler(id)}\n            className=\"btn btn-danger float-right m-1\"\n          >\n            <i className=\"bi bi-trash\" />\n          </button>\n          <Link to={linkPath} className=\"btn btn-secondary float-right m-1\">\n            <i className=\"bi bi-pencil-fill\" />\n            {` `}Edit\n          </Link>\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport Card from '../../Components/Card/Card';\nimport { deleteCard } from '../../utils/api/index';\n\nconst CardList = ({ cards = [] }) => {\n  const { deckId } = useParams();\n  const history = useHistory();\n\n  const deleteCardHandler = async (cardId) => {\n    if (window.confirm('Do you want to delete this card?')) {\n      await deleteCard(cardId);\n      history.go(`/decks/${deckId}`);\n    }\n  };\n\n  let content;\n  if (cards.length === 0) {\n    content = (\n      <div>\n        <p>There are no cards in this deck. Please add some cards</p>\n      </div>\n    );\n  } else {\n    content = cards.map((card) => (\n      <Card\n        card={card}\n        deleteHandler={deleteCardHandler}\n        key={`${card.id}${card.deckId}`}\n      />\n    ));\n  }\n\n  return <ul className=\"list-group\">{content}</ul>;\n};\n\nexport default CardList;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams, useHistory } from 'react-router-dom';\nimport { readDeck, deleteDeck } from '../../utils/api/index';\nimport CardList from '../CardList/CardList';\n\nconst DeckView = () => {\n  const { deckId } = useParams();\n  const history = useHistory();\n\n  const [deck, setDeck] = useState({});\n  const { name, description } = deck;\n\n  useEffect(() => {\n    async function getDeck() {\n      const response = await readDeck(deckId);\n      setDeck(response);\n    }\n    getDeck();\n  }, [deckId]);\n\n  const deckDeleteHandler = async (id) => {\n    if (window.confirm('Delete this deck?')) {\n      deleteDeck(id);\n      history.push('/');\n    }\n  };\n\n  return (\n    <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\" key=\"home-link\">\n            <Link to={'/'}>\n              <i className=\"bi bi-house-door-fill\" />\n              {` `}Home\n            </Link>\n          </li>\n          <li\n            className=\"breadcrumb-item active\"\n            aria-current=\"page\"\n            key=\"create-deck-link\"\n          >\n            {name}\n          </li>\n        </ol>\n      </nav>\n      <div className=\"d-flex flex-column\">\n        <h3>{name}</h3>\n        <p>{description}</p>\n        <div className=\"flex-row button-ctr\">\n          <div className=\"float-left\">\n            <Link\n              to={`/decks/${deckId}/edit`}\n              className=\"btn-lg btn-secondary mr-1 mt-1\"\n            >\n              <i className=\"bi bi-eye\" />\n              {` `}Edit\n            </Link>\n            <Link\n              to={`/decks/${deckId}/study`}\n              className=\"btn-lg btn-primary m-1\"\n            >\n              <i className=\"bi bi-book-half\"></i>\n              {` `}Study\n            </Link>\n            <Link\n              to={`/decks/${deckId}/cards/new`}\n              className=\"btn-lg btn-primary m-1\"\n            >\n              <i className=\"bi bi-plus-lg\" />\n              {` `}Add Card\n            </Link>\n          </div>\n          <div>\n            <button\n              className=\"btn-lg btn-danger float-right\"\n              onClick={() => deckDeleteHandler(deckId)}\n            >\n              <i className=\"bi bi-trash\" />\n            </button>\n          </div>\n        </div>\n        <div>\n          <h1>Cards</h1>\n          <CardList cards={deck.cards} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DeckView;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport DecksList from '../Containers/DecksList/DecksList';\nimport CreateDeck from '../Containers/CreateDeck/CreateDeck';\nimport EditDeck from '../Containers/EditDeck/EditDeck';\nimport Study from '../Containers/Study/Study';\nimport EditCard from '../Containers/EditCard/EditCard';\nimport NewCard from '../Containers/NewCard/NewCard';\nimport DeckView from '../Containers/DeckView/DeckView';\nimport NotFound from '../Layout/NotFound';\n\nconst Decks = () => {\n  return (\n    <div>\n      <Switch>\n        <Route exact path={'/'}>\n          <DecksList />\n        </Route>\n        <Route path={`/decks/:deckId/cards/:cardId/edit`}>\n          <EditCard />\n        </Route>\n        <Route path={'/decks/:deckId/cards/new'}>\n          <NewCard />\n        </Route>\n        <Route path={'/decks/:deckId/study'}>\n          <Study />\n        </Route>\n        <Route path={'/decks/new'}>\n          <CreateDeck />\n        </Route>\n        <Route path={'/decks/:deckId/edit'}>\n          <EditDeck />\n        </Route>\n        <Route path={'/decks/:deckId'}>\n          <DeckView />\n        </Route>\n        <Route>\n          <NotFound />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nexport default Decks;\n","import React, { Fragment } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Header from './Header';\nimport DecksRoutes from '../Routes/DecksRoutes';\nimport NotFound from './NotFound';\n\nfunction Layout() {\n  return (\n    <Fragment>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route path=\"/\">\n            <DecksRoutes />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}